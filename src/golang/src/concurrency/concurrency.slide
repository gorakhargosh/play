Namasté, Concurrency!
One piecemeal at a time (sequentially).
Tags: go golang concurrency examples patterns


Yesudeep Mangalapilly | येसुदीप मंगलापिल्ली
_Lead_, _Engineering_ — gTech AdSales (DevShop)
yesudeep@google.com
yesudeep@gmail.com


* Mmm... McGophers

.image images/gopher-go.jpg

.image images/mcdonalds-logo.svg


* Analysing a McDonald's Outlet

- Not OO; process-oriented.
- The design and analysis of a McDonald's restaurant.
- Replicating the restaurant.
- Pay attention to the flow of data, not so much to the flow of control.

- TODO(yesudeep): Add a diagram here.

* Gratification

- Instant
- Delayed

* Google Search: A real demo

.image images/google-albert-einstein.png

* Faking Google search

.code example-google-search.go /^func fakeSearch/,/^}/

.code example-google-search.go /show fakeEngines OMIT/,/end show fakeEngines OMIT/

* Google Search: Sequential

.play example-google-search.go /^func Google1/,/^}/

* Google Search: Concurrent

.play example-google-search.go /^func Google2/,/^}/

* Google Search: Concurrent and Time-bound

.play example-google-search.go /^func Google3/,/^}/

* Google Search: Concurrent, Time-bound, and Replicated

.play example-google-search.go /^func Google4/,/^}/

* Google Search: Replication and first-come-first-served

.code example-google-search.go /^func First/,/^}/

* Terminology

* (1/3) Some Terminology: Blocking or non-blocking

- Blocking operation (I/O or computation)

  bash$ python -m SimpleHTTPServer
  Serving HTTP on 0.0.0.0 port 8000 ...
  ... takes over your command line ...
  [Interrupt with Ctrl-C to exit]

- Non-blocking operation (I/O or computation)

  bash$ python -m SimpleHTTPServer &
  bash$ # You can type another command here...

* (2/3) Some Terminology: Order in time

- Time goes left-to-right

- Synchronous (in order)

  |-----A----->||--------B-------->||-------C------->|

- Asynchronous (out-of-order)

  |----A----->|
     |-----B----------->|
         |-------C------>|

- Wait group

  |------------A------------->|
  |------------B----------->| |
         |-------C------>|    |
                              |
  |----------waiting----------|----resume---->


* (3/3) Some Terminology:

- TODO(yesudeep): Add more terminology here.

* When someone quietly shifts your chair from underneath you right before you sit, you are about to experience a very loud race condition. *thud*

* (1/2) Real world: Examples

- People working independently of each other while communicating.
- Should you waiting for a chat message to arrive as a blocking operation before you can respond?
- Postal mail using mailboxes as a non-blocking operation.
- Async callbacks akin to SMS notification (when your Amazon order is out for delivery).

* Concurrency is about synchronizing work by communicating.

* (2/2) Real world: Communication is used to

- track progress
- schedule and prioritize tasks
- resolve conflicts
- resolve dependencies

* (1/4) Go Primitives: High-Level CSP

- *Goroutines* are independently executing functions in the same address space.

  go func() {
     // Do something.
  }()

- *Channels* (typed message queues; blocking send; blocking receive) for lockstep communication between goroutines (e.g. telephone)

  a := <-ch     // Receive from a channel.
  ch <- 3       // Send to a channel.

- *Buffered* channels (non-blocking send until full; blocking receive; e.g. postal mail)

  bch := make(chan bool, 2)  // Capacity 2.

- Receiving from a channel always blocks unless the channel is closed.

  close(ch)
  <-ch  // non-blocking on closed channel.


* (2/4) Go Primitives: Mutexes, wait groups and pools

- Synchronized memory access: [[https://godoc.org/sync#Mutex][sync.Mutex]]
- Distributing workload: [[https://godoc.org/sync#Pool][sync.Pool]]
- Waiting for multiple goroutines to complete: [[https://godoc.org/sync#WaitGroup][sync.WaitGroup]]
- Single-execution goroutines: [[https://godoc.org/sync#Once][sync.Once]]
- Condition variables: [[https://godoc.org/sync#Cond][sync.Cond]]

* (3/4) Go Primitives: Atomic operations

- Atomic operations (increment, decrement, CAS, swaps, pointer dereferencing) [[https://godoc.org/sync/atomic][sync/atomic]]
- Why CAS (check-and-set)? To avoid race conditions.
- Example race condition: "Check-and-sit" or "bum-meet-floor".


* (4/4) Go Primitives: Patterns based on primitives

- Semaphore using buffered channels and communication-guarded worker routines.
- Multiplexing: fan-in, fan-out
- Pipelining
- Futures based on generator functions that return channels as handles for future values.
- Time-bounding
- Replication


# Key points.

* Concurrency is not parallelism.

- Can work with a single processor
- Facilitates parallelism if multiple processors are available
- Video: [[https://www.youtube.com/watch?v=cN_DpYBzKso][Rob Pike explains why]]

* Concurrency: a way to compose structure of software to work in coordination.

- A directed graph; one without cycles (potential deadlocks) is better (DAG).

* Parallelism: simultaneous execution of possibly related or unrelated things.

- Best suitable for independently executing computation that needs no synchronization.
- Examples: image processing,

* Do not communicate by sharing memory; instead, share memory by communicating.

- Share synchronized message queues; do not share memory.

* Go gives you tools to shoot yourself in the foot, however.

- Mutexes
- Pools
- Atomic operations
- RW Mutexes
- Condition variables

* Flow-of-data > flow-of-control.


* CSP (Communicating Sequential Processes)

- Based on [[http://www.usingcsp.com/cspbook.pdf][paper]] by [[https://en.wikipedia.org/wiki/Tony_Hoare][C. A. R. "Tony" Hoare]] (inventor of [[https://en.wikipedia.org/wiki/Quicksort][quick sort]] & null reference).

- Schedule blocking operations to run in separate processes (*goroutines* in Go).

- Synchronize by communicating over shared message queues (*channels* in Go).

- Avoiding concurrency within each *sequential* process.

- Sequential process example: Indian traditional game called "langdi??" (hop and chase). Turing machines anybody?


* Goroutines and "Please wait..."

* Example: Blocking I/O or computation

A very boring function written by Rob Pike.

.play blocking-main.go /show A OMIT/,/end show A OMIT/

* Example: Non-blocking exit

- comes as a neat surprise

.play non-blocking-main.go /show A OMIT/,/end show A OMIT/

* Example: Using `os.Stdin` to wait

- avoid
- quirky
- unreliable
- human/stdin error-prone
- dependency on presence of a human being/standard input

.play waiting-using-stdin.go /show A OMIT/,/end show A OMIT/

* Example: Using `time.Sleep` to wait

- avoid
- unreliable
- what if the goroutine takes more time than we're waiting?
- what if the goroutine takes a lot less time than we're waiting?
- surely, there must be something better.

.play waiting-using-sleep.go /show A OMIT/,/end show A OMIT/

* Example: Using signal channels to wait

- Why this is flow-of-control, not flow-of-data.
- Resembles the *goto* statement [[http://dl.acm.org/citation.cfm?id=362947&dl=ACM&coll=DL&CFID=698007377&CFTOKEN=71204148][advised against by Djikstra]].
- Prefer using [[https://godoc.org/sync#WaitGroup][wait groups]] where possible, instead.

.play waiting-for-one-goroutine-using-signal-channel.go /show A OMIT/,/end show A OMIT/

* Example: Waiting for groups of goroutines

.play waiting-using-wait-groups.go /show A OMIT/,/end show A OMIT/

* Channels: Talk to my handle.


* Example: Channels

.play channels.go

* Example: Channels have direction

* Example: Ping Pong and Deadlock detection

.play ping-pong.go /show A OMIT/,/end show A OMIT/

- source: [[http://blog.golang.org/advanced-go-concurrency-patterns][Advanced Go Concurrency Patterns - Sameer Ajmani]]

* Example: Buffered channels
* Example: `nil` channels
* Example: Closing Channels
* Example: Reading from closed channels

* Example: Pipeline


* Example: Semaphore - Worker

.play semaphores-for-throttling-goroutines.go /^func worker/,/^}/

* Example: Semaphore - Throttling goroutines

.play semaphores-for-throttling-goroutines.go /^func main/,/^}/

* Example: Semaphore - Atomic counting

- All or nothing.
- Check-and-set in hardware.

.play semaphores-for-throttling-goroutines.go /show atomicCounting OMIT/,/end show atomicCounting OMIT/


* Example: Spinlock and atomic operations



* Pattern: Fan-in
* Pattern: Fan-out
* Pattern: PubSub


* Hype 1: There is a "No" in "NodeJS"

- Single-threaded
- Event-driven
- Async I/O-based
- Callback hell
- New [[http://www.html5rocks.com/en/tutorials/es6/promises/][promises API]] helps a bit
- The "new" thing but fundamentally limited
- There is a lot more to concurrency than just this

* Links:

- [[http://www.golangpatterns.info/concurrency/futures][Go Patterns]]
