Namasté, Concurrency in Go!
One piecemeal at a time (sequentially).
Tags: go golang concurrency examples patterns


Yesudeep Mangalapilly | येसुदीप मंगलापिल्ली
_Lead_, _Engineering_ — DevShop (gTech AdSales)
yesudeep@google.com

# TODO(yesudeep): Telnet chat example http://synflood.at/tmp/golang-slides/mrmcd2012.html#1
# TODO(yesudeep):


* Slides

[[https://j.mp/goconcur][j.mp/goconcur]]

* Why Go? Ask Flipkart.

.image images/ask-flipkart-about-go.png 550 _

* Why Go? Ask Apple.

.image images/ask-apple-about-go.png 550 _

* Why Go?

- Ask [[https://github.com/facebookgo/][github.com/facebookgo]]
- Ask Canonical (makes Ubuntu Linux), CloudFlare (CDN), Docker (Linux containers).
- Ask SoundCloud (social music platform), Twitter (social network)
- Ask Uber (cabs anybody?), Stack Exchange (hello stackoverflow.com? :)
- Ask GitHub, IBM, Dropbox, BBC Worldwide

- A long list of [[https://github.com/golang/go/wiki/GoUsers][users]].

* The free hardware-accelerated lunch is over.

* More cores; limited speed improvements.

- Moore's Law
- Need for concurrent systems programming languages
- [[http://dave.cheney.net/2015/08/08/performance-without-the-event-loop][Performance without the event loop]] by Dave Cheney

* Gratification

- Instant
- Delayed

* How does Google Search work?

* Google Search: A real demo

.image images/google-albert-einstein.png 700 _

* Faking Google search

Example from [[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]]

.code example-google-search.go /^func makeBackend/,/^}/

.code example-google-search.go /show fakeEngines OMIT/,/end show fakeEngines OMIT/

* Google Search: Sequential

.play example-google-search.go /^func Google1/,/^}/

* Google Search: Concurrent

.play example-google-search.go /^func Google2/,/^}/

* Google Search: Concurrent and Time-bound

.play example-google-search.go /^func Google3/,/^}/

* Google Search: Concurrent, Time-bound, and Replicated

.play example-google-search.go /^func Google4/,/^}/

* Google Search: First-come-first-served

.code example-google-search.go /show firstComeFirstServed OMIT/,/end show firstComeFirstServed OMIT/

* Google Search: Reducing tail latency

- hedging requests work all backends, discards the work of laggards

- abort the laggards, save resources, and avoid contention

.play example-google-search.go /^func Google5/,/^}/

* Google Search: Replication with cancellation

.code example-google-search.go /^func CancellableFirst/,/^}/

* Concurrent NS Lookup

Standard input

  $ go run nslookup.go

Tiny list

  $ go run nslookup.go < domains.list

Small list

  $ go run nslookup.go < topsites.list


* Real world

.image images/surgery.jpg 600 _

* Mmm... McGophers

.image images/gopher-go.jpg

.image images/mcdonalds-logo.svg

* Analysing a McDonald's Outlet

- Real world is NOT object-oriented; it is concurrent.
- The design and analysis of a McDonald's restaurant.
- Replicating the restaurant.
- Pay attention to the flow-of-data, then to the flow-of-control.


* Real world examples

- People working independently of each other while communicating.
- Should you block waiting for a chat message to arrive before you can respond?
- Postal mail - non-blocking sends.
- Async callbacks akin to SMS notification (when your Amazon order is out for delivery).

# Key points.

* Concurrency: Flow-of-data > flow-of-control

* Patterns: What you can do

- Pair - one-to-one communication
- Request-Response - stateless services to process requests
- Pipeline - aggregation from many sources and load balancing among many destinations
- Bus - one-to-many communication
- Pub-Sub - interest based one-to-many communication
- Survey - query multiple sources

* Patterns: Pair (one-to-one)

.image images/pattern-pair.png

* Patterns: Request-Response

- Client requests; server responds

.image images/pattern-reqrep.png

* Patterns: Pipeline (one-way data flow)

.image images/pattern-pipeline.png

* Patterns: Bus (many-to-many)

.image images/pattern-bus.png

* Patterns: PubSub (topic broadcasting)

.image images/pattern-pubsub.png

* Patterns: Survey (query a group)

.image images/pattern-survey.png

* Patterns: Adding behavior

- Message queues (buffered and unbuffered)
- Generators
- Signaling
- Time-bounding
- Waiting
- Idling
- Throttling (rate-control) using semaphores
- Multiplexing: fan-in, fan-out
- Replication (first-come-first-served)
- Cancellation (reducing tail latency)

* Concurrency: a way to compose structure of software to work in coordination

- Appreciably, a *concurrency*pattern* == _directed_acyclic_graph_ (DAG)
- Cycles indicate possible deadlocks, but do occur
- As acyclic as possible

.image images/deadlocked-trains.jpg 300 _

* Concurrency != parallelism

- More about *topology*; less about execution
- Can work with a single processor core (scheduling by *timeslicing*); e.g. _beatboxing_
- *Facilitates*parallelism* if multiple processor cores are available
- Concurrency that scales over a network is called *distributed*computing*
- Video: [[https://www.youtube.com/watch?v=cN_DpYBzKso][Rob Pike explains why]]

* Parallelism: simultaneous execution of possibly related or unrelated things

- Best suitable for independently executing computation that needs no synchronization
- Examples: image processing

TODO(yesudeep): Pull examples from haskell concurrency talk.

* Go CSP (Communicating Sequential Processes)

- Based on [[http://www.usingcsp.com/cspbook.pdf][paper]] by [[https://en.wikipedia.org/wiki/Tony_Hoare][C. A. R. "Tony" Hoare]] (inventor of [[https://en.wikipedia.org/wiki/Quicksort][quick sort]] & null reference).

- Schedule blocking operations to run in separate processes (*goroutines* in Go).

- Synchronize by communicating over shared message queues (*channels* in Go).

- Do not communicate by sharing memory; instead, share memory by communicating.

* Go gives you tools to shoot yourself in the foot, however

- Shared state
- Mutexes
- Pools
- Atomic operations
- RW Mutexes
- Condition variables

* Terminology

* Terminology: Blocking or non-blocking

- Blocking operation (I/O or computation or idling)

    $ python -m SimpleHTTPServer
    Serving HTTP on 0.0.0.0 port 8000 ...
    ... takes over your command line ...
    [Interrupt with Ctrl-C to exit]

- Example idling:

    $ sleep 5
    ... 5 seconds pass ...
    $

- Non-blocking operation (I/O or computation)

    $ python -m SimpleHTTPServer &
    $ # You can type another command here...

* Terminology: Order in time

- Time goes left-to-right

- Synchronous (in order)

 |-----A----->||--------B-------->||-------C------->|

- Asynchronous (out-of-order)

 |----A----->|
    |-----B----------->|
                            |---C-->|

- Wait group (or barrier)

 |------------A------------->|
 |-------B-------->|         |
        |-------C------>|    |
                             |
 |----------waiting----------|----resume---->


* Terminology: Race conditions

When someone quietly shifts your chair from underneath you right before you sit, you are about to experience a very loud *race*condition*.

Data race: When multiple goroutines access the same memory concurrently and at least one of them is a write.

* Terminology: Deadlock

Multiple processes/threads waiting for each other to obtain and release resources, but nobody ever does--the state of no progress that ensues is a *deadlock*.

.image images/deadlocked-trains.jpg

* Terminology: Cancellation

- abort background API call tree if unused

.image images/cancellation.png _ 250

* Concurrency Primitives

* Primitives: Typed message passing

- Creation

  type Monkey struct {Name string}
  channel := make(chan Monkey)

- Send (blocking and non-blocking)

  channel <- Monkey{Name: "Chichichi"}

- Receive (always blocks, unless channel closed)

  chachacha := <-channel

  fmt.Println(chachacha.Name)

- Closing

  close(channel)


* Primitives: High-Level CSP

*Goroutines* are independently executing functions in the _same_address_space_.

  go func() {
     // Do something.
  }()

*Channels* - _typed_message_queues_ (blocking send; blocking receive) for *lockstep* communication between goroutines (e.g. telephone)

  a := <-ch     // Receive from a channel.
  ch <- 3       // Send to a channel.

*Buffered*channels* (non-blocking send until full; blocking receive; e.g. postal mail)

  bch := make(chan bool, 2)  // Capacity 2.

* Primitives: go keyword

Think of it like the `&` character bash shell.

  $ command &             # run 'command' in the background

Blocking function calls can be scheduled using `go` keyword.

  go blocking()           // schedule to run independently

Blocking immediate functions can be scheduled similarly:

  go func() {
    // Do something.
  }()

No guarantee that new goroutine scheduled immediately.

* Scheduling goroutines

Goroutines are cooperatively scheduled; not by kernel. Closer to coroutines (see [[https://www.youtube.com/watch?v=MCs5OvhV9S4][Python Concurrency Talk]]), but _conceptually_like_threads_.

Points at which goroutines can be switched:

- _Blocking_ send and receive channel operations
- `go` statement
- Blocking syscalls like file and network operations
- After being stopped for a garbage collection cycle
- Explicit calls to `runtime.Gosched()`

In other words, places where the goroutine cannot continue until it has more data, or more space to put data.

More information in [[http://go-talks.appspot.com/github.com/davecheney/presentations/performance-without-the-event-loop.slide][Slides: Performance without the event loop]]

* Primitives: Mutexes, wait groups and pools

- Synchronized memory access: [[https://godoc.org/sync#Mutex][sync.Mutex]]
- Distributing workload: [[https://godoc.org/sync#Pool][sync.Pool]]
- Waiting for multiple goroutines to complete (barriers): [[https://godoc.org/sync#WaitGroup][sync.WaitGroup]]
- Single-execution goroutines: [[https://godoc.org/sync#Once][sync.Once]]
- Condition variables: [[https://godoc.org/sync#Cond][sync.Cond]]

* Primitives: Atomic operations

Implemented in hardware instruction set - [[https://godoc.org/sync/atomic][sync/atomic]]: (add, CAS, swaps, stores, pointer dereferencing)

Why CAS (compare-and-set)? To prevent data races

* Primitives: Example atomic operation (CAS)

IA-64 bit assembly example:

.code compare-and-swap-uint64.s

* Waiting (infamous "Please wait...")

* Blocking I/O, computation, or idling

A very boring function written by Rob Pike.

.play blocking-main.go /show A OMIT/,/end show A OMIT/

* Non-blocking exit

- comes as a neat surprise

.play non-blocking-main.go /show A OMIT/,/end show A OMIT/

* Using `os.Stdin` to wait

- avoid
- quirky
- unreliable
- human/stdin error-prone
- dependency on presence of a human being/standard input

.play waiting-using-stdin.go /show A OMIT/,/end show A OMIT/

* Using `time.Sleep` to wait

- avoid
- unreliable
- what if the goroutine takes more time than we're waiting?
- what if the goroutine takes a lot less time than we're waiting?
- surely, there must be something better.

.play waiting-using-sleep.go /show A OMIT/,/end show A OMIT/

* Using signal channels to wait

- Why this is flow-of-control, not flow-of-data: resembles the *goto* statement [[http://dl.acm.org/citation.cfm?id=362947&dl=ACM&coll=DL&CFID=698007377&CFTOKEN=71204148][advised against by Djikstra]].
- Prefer using [[https://godoc.org/sync#WaitGroup][wait groups]] for waiting, where possible, instead.
- Use this for signalling (upstream in pipelines, for example).

.play waiting-for-one-goroutine-using-signal-channel.go /show A OMIT/,/end show A OMIT/

* Waiting for groups of goroutines

.play waiting-using-wait-groups.go /show A OMIT/,/end show A OMIT/

* Wait groups (or barriers)

In message passing, any global communication (such as reduction or scatter) may imply a wait group (or barrier).

Muliplexing aggregation and load-balancing, for example.

* Channels: Talk to my handle

* Lockstep communication

.image images/talk-to-the-hand.jpg 600 _

* Channels

.play channels.go

* Channels have direction

  chan Monkey     // can be use to send and receive values of type Monkey.
  chan <- Monkey  // can only be used to send values of type Monkey.
  <-chan Monkey   // can only be used to receive values of type Monkey.

We will see examples of usage later.

* Buffered channels

Behave like mailboxes.

*Send* non-blocking until capacity; *receive* blocks until receiver ready.

Uses:
- simulating semaphores
- non-blocking sends upto capacity
- receiving only some values from a channel, not all, without blocking senders

.play buffered-channels.go /^func main/,/^}/

* nil channels

nil channels are never ready for communication. Expect deadlocks.

.play nil-channel-send-receive-panics.go /^func main/,/^}/

* Closing Channels

Closing a channel works as a _broadcast_signal_; any number of goroutines can
select on a signal channel that is closed.

_After_the_last_value_has_been_received_from_a_closed_channel,_any_receive_from_it_will_succeed_without_blocking,_returning_the_zero_value_.

.play closing-channels.go /^func main/,/^}/

* Closed channel flushes values before "closing"

.play closed-channel-drains-values-before-closing.go /^func main/,/^}/

* Carefully closing channels

- closing a _nil_ channel panics

- closing a _closed_ channel panics

- only *1*goroutine* should close a channel

.play close-panics.go /^func main/,/^}/

* Generating channels

* Generator pattern

.play generator-pattern.go /show A OMIT/,/end show A OMIT/

* Draining a channel with for...range

.play for-range-channel.go /show A OMIT/,/end show A OMIT/

* Generators as services

.play generators-as-services.go /show A OMIT/,/end show A OMIT/

* Multiplexing

* Fanning-in (aggregation)

- e.g. tmux sharing a single TCP connection between multiple shell sessions

.image images/fan-in-gophers.jpg 300 _

* Multiplexing (Fan-in)

.code generator-multiplexing-fan-in.go /^func fanIn/,/^}/

* Multiplexing (Fan-in continued)

.play generator-multiplexing-fan-in.go /^func main/,/^}/

* Multiplexing (Fan-in using select)

Selecting communication _pseudorandomly_ if multiple communications are ready:

.play generator-multiplexing-using-select.go /^func fanIn/,/^}/

* Non-blocking select

Selecting communication without waiting:

.play non-blocking-select.go /^func main/,/^}/

* Timeouts and moving on

* Timing out a single communication

.play generator-timeout.go /^func main/,/^}/

* Timing out entire conversations

.play generator-timeout-conversation.go /^func main/,/^}/

* Timing out: How it works


.play timeout-after.go /show A OMIT/,/end show A OMIT/

* Timing out: The emitter

.code timeout-after.go /^func gen/,/^}/


* Signalling

* Using quit channels for signaling

.play quit-channels.go /show A OMIT/,/end show A OMIT/

* Using quit channels and cleaning up

.play quit-channels-plus-cleanup.go /show A OMIT/,/end show A OMIT/

* Race conditions (and shared state)

* Meme time

.image images/data-race-dragon.png _ 700

* Detecting race conditions

Tooling makes Go awesome:

  $ go (run|build|test...) -race foo.go

Not everything can be detected, but quite a bit can be.

HUGE shout out to Dmitry Vyukov ([[https://twitter.com/dvyukov][@dvyukov]] and [[https://github.com/dvyukov][github.com/dvyukov]]) for making this possible.


* Unsynchronized counter

.play race-condition-simple.go /^func main/,/^}/

* Insidious goroutine closures

- closures share memory

.play race-condition-closure.go /^func raceClosure/,/^}/

* Safe goroutine closures

- pass values as arguments

.play race-condition-closure.go /^func noRaceClosurePassArgument/,/^}/

* Careful goroutine closures

- unique variable per iteration

.play race-condition-closure.go /^func noRaceClosureUniqueVariable/,/^}/

* Careful with wait groups (barriers) too

- call `wg.Add(N)` *before* `go function()`

.play waiting-using-wait-groups.go /^func main/,/^}/

* Careful with wait groups (barriers) too

- call `wg.Done()` before each goroutine returns (presumably using `defer`).

.play waiting-using-wait-groups.go /^func work/,/^}/

* Loading Web service configuration non-racily

- when loading configuration for Web service into a map use a wait group to avoid a data race
- because goroutines can access map even before fully-loaded
- anywhere aggregation or scattering is involved along with non-synchronized shared memory, a wait group may be required to prevent data races
- use `init()` if possible; no goroutines can run before all `init()` functions executed.

* Mutexes (and shared state)

* Synchronized shared state

.play mutex-atomic-int.go /^func main/,/^}/

* Using mutexes to synchronize access

.code mutex-atomic-int.go /show A OMIT/,/end show A OMIT/


* Deadlocks

* Ping Pong and Deadlock detection

.play ping-pong.go /show A OMIT/,/end show A OMIT/

- source: [[http://blog.golang.org/advanced-go-concurrency-patterns][Advanced Go Concurrency Patterns - Sameer Ajmani]]

* Starvation

* Pipelines

* What is a Pipeline?

- A *pipeline* is a series of stages connected by channels, where each stage is a group of goroutines running the same function.

- Goroutines *receive* values from _upstream_ via _inbound_ channels.
- Goroutines *perform*some*function* on that data, usually producing new values.
- Goroutines *send* values _downstream_ via _outbound_ channels.

.image images/pattern-pipeline.png

* Draining pipelines [1/4]

- stage: consumer draining inbound channel

.play pipeline-no-cancellation.go /^func main/,/^}/

* Draining pipelines [2/4]

- stage: emitters and outbound channels

.code pipeline-no-cancellation.go /^func gen/,/^}/

* Draining pipelines [3/4]

- stage: squaring

.code pipeline-no-cancellation.go /^func sq/,/^}/

* Draining pipelines [4/4]

- stage: multiplexing N inbound channels onto 1 outbound channel

.code pipeline-no-cancellation.go /^func merge/,/^}/

* ...but what if we only want some, not all?

* Pipelines with cancellation [1/4]

- stage: consumer NOT draining inbound channel

.play pipeline-with-cancellation.go /^func main/,/^}/

* Pipelines with cancellation [2/4]

- stage: emitters and outbound channels

.code pipeline-with-cancellation.go /^func gen/,/^}/

* Pipelines with cancellation [3/4]

- stage: squaring

.code pipeline-with-cancellation.go /^func sq/,/^}/

* Pipelines with cancellation [4/4]

- stage: multiplexing N inbound channels onto 1 outbound channel

.code pipeline-with-cancellation.go /^func merge/,/^}/

* Semaphores (and rate-control)

* Why?

.image images/single-lane-bridge.jpg

* Semaphore Worker

.play semaphores-for-throttling-goroutines.go /^func worker/,/^}/

* Throttling goroutines using buffered channels

.play semaphores-for-throttling-goroutines.go /^func main/,/^}/

* Atomic counting to ensure semaphore works

- All or nothing.
- Check-and-set in hardware.

.play semaphores-for-throttling-goroutines.go /show atomicCounting OMIT/,/end show atomicCounting OMIT/


* Spinlock and atomic operations

TODO(yesudeep): Add spinlock example from github.

* Pattern: PubSub

TODO(yesudeep): This is currently hard to implement. Libraries available.

* Pattern: Fan-out.

TODO(yesudeep): Load-balancing example.

* Hype 1: There is a "No" in "NodeJS"

- Single-threaded
- Event-driven
- Async I/O-based
- Callback hell
- New [[http://www.html5rocks.com/en/tutorials/es6/promises/][promises API]] helps a bit
- The "new" thing but fundamentally limited
- There is a lot more to concurrency than just this

* Links:

- Slides: [[https://j.mp/goconcur][j.mp/goconcur]]
- [[https://golang.org][golang.org]]
- [[http://www.golangpatterns.info/concurrency/futures][golangpatterns.info]]
- [[http://gophervids.appspot.com/][gophervids.appspot.com]]
- [[http://go-meetups.appspot.com/][go-meetups.appspot.com]]
- Go Wiki: [[https://github.com/golang/go/wiki/LearnConcurrency][Learn Concurrency]]
- [[https://gist.github.com/kachayev/21e7fe149bc5ae0bd878][Drawbacks and improvements]]
